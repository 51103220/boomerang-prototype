start: 0x10474 gotmain: true
got filename elf-init.c for main
starting decode at address 0x10474
finished processing proc main at address 0x10474
1 procedures
decompiling entry point main
begin decompile(main)
initialise decompile for main
--- debug print before SSA for main ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: 
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    0 *8* r8.x := m[r7 + 1]
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
              *union* IMP REF r8
            0 *union* r30 := r8
00010478    0 *j32* %flags := (r8.x.m.bit1)*8* ~= 0
            0 BRANCH 0x104e0, condition equals
High level: %flags
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c    0 *16* r11 := r6 + 20
00010480    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
00010484    0 *8* r8.x.m.bit5 := 1
00010488    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* m[tmp1] := r8.x
0001048c    0 *8* r8.x.m.bit3 := 0
00010490    0 *j32* %flags := (r8.x.m.bit3)*8* ~= 1
            0 BRANCH 0x104b8, condition equals
High level: %flags
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494    0 *16* r11 := r5 + 20
00010498    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
0001049c    0 *j32* %flags := (r8.x.m.bit5)*8* ~= 0
            0 BRANCH 0x104a4, condition equals
High level: %flags
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4    0 *16* r11 := r5 + 6
000104a8    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
000104ac    0 *8* r8.x.m.bit7 := 0
000104b0    0 *8* r8.x.m.bit6 := 0
000104b4    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* m[tmp1] := r8.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
000104b8    0 *16* r11 := r6 + 20
000104bc    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
000104c0    0 *j32* %flags := (r8.x.m.bit5)*8* ~= 0
            0 BRANCH 0x104c8, condition equals
High level: %flags
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8    0 *16* r11 := r6 + 6
000104cc    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
000104d0    0 *8* r8.x.m.bit7 := 0
000104d4    0 *8* r8.x.m.bit6 := 0
000104d8    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* m[tmp1] := r8.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
000104e0    0 *8* r8.x := m[56]
000104e4    0 *j32* %flags := (r8.x.m.bit6)*8* ~= 1
            0 BRANCH 0x10548, condition equals
High level: %flags
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8    0 *8* r8.x := m[r13]
000104ec    0 *j32* %flags := (r8.x.m.bit2)*8* ~= 1
            0 BRANCH 0x10514, condition equals
High level: %flags
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0    0 *16* r11 := r4 + 4
000104f4    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
000104f8    0 *8* r8.x := (r8.x) & 192
000104fc    0 *8* r1 := r8.x
00010500    0 *16* r11 := r6 + 6
00010504    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
00010508    0 *8* r8.x := (r8.x) & 192
0001050c    0 *8* r8.x := (r8.x) | r1
00010510    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* m[tmp1] := r8.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00010514    0 *16* r11 := r5 + 20
00010518    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
0001051c    0 *j32* %flags := (r8.x.m.bit4)*8* ~= 1
            0 BRANCH 0x10544, condition equals
High level: %flags
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520    0 *16* r11 := r4 + 4
00010524    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
00010528    0 *8* r8.x := (r8.x) & 192
0001052c    0 *8* r1 := r8.x
00010530    0 *16* r11 := r6 + 6
00010534    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8.x := m[tmp1]
00010538    0 *8* r8.x := (r8.x) & 192
0001053c    0 *8* r8.x := (r8.x) | r1
00010540    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* m[tmp1] := r8.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00010544    0 RET
              Modifieds: 
              Reaching definitions: 
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548    0 GOTO 0x10544


=== end debug print before SSA for main ===

--- debug initial print after decoding for main ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: 
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7 + 1]
              *union* IMP REF r8
            3 *union* r30 := r8
              *union* IMP REF r8
            5 *union* r30 := r8
              *union* IMP REF r8
            7 *union* r30 := r8
              *union* IMP REF r8
            9 *union* r30 := r8
              *union* IMP REF r8
           11 *union* r30 := r8
              *union* IMP REF r8
           13 *union* r30 := r8
              *union* IMP REF r8
           15 *union* r30 := r8
              *union* IMP REF r8
           17 *union* r30 := r8
              *union* IMP REF r8
           19 *union* r30 := r8
              *union* IMP REF r8
           21 *union* r30 := r8
              *union* IMP REF r8
           23 *union* r30 := r8
              *union* IMP REF r8
           25 *union* r30 := r8
              *union* IMP REF r8
           27 *union* r30 := r8
              *union* IMP REF r8
           29 *union* r30 := r8
              *union* IMP REF r8
           31 *union* r30 := r8
              *union* IMP REF r8
           33 *union* r30 := r8
              *union* IMP REF r8
           35 *union* r30 := r8
              *union* IMP REF r8
           37 *union* r30 := r8
              *union* IMP REF r8
           39 *union* r30 := r8
              *union* IMP REF r8
           41 *union* r30 := r8
              *union* IMP REF r8
           43 *union* r30 := r8
              *union* IMP REF r8
           45 *union* r30 := r8
              *union* IMP REF r8
           47 *union* r30 := r8
              *union* IMP REF r8
           49 *union* r30 := r8
              *union* IMP REF r8
           51 *union* r30 := r8
              *union* IMP REF r8
           53 *union* r30 := r8
              *union* IMP REF r8
           55 *union* r30 := r8
              *union* IMP REF r8
           57 *union* r30 := r8
              *union* IMP REF r8
           59 *union* r30 := r8
              *union* IMP REF r8
           61 *union* r30 := r8
              *union* IMP REF r8
           63 *union* r30 := r8
              *union* IMP REF r8
           65 *union* r30 := r8
00010478   66 *j32* %flags := (r8.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: %flags
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6 + 20
00010480   69 *32* tmp1 := zfill(16,31,r11)
           70 *8* r8.x := m[tmp1]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r11)
           73 *8* m[tmp1] := r8.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: %flags
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5 + 20
00010498   78 *32* tmp1 := zfill(16,31,r11)
           79 *8* r8.x := m[tmp1]
0001049c   80 *j32* %flags := (r8.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: %flags
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5 + 6
000104a8   83 *32* tmp1 := zfill(16,31,r11)
           84 *8* r8.x := m[tmp1]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r11)
           88 *8* m[tmp1] := r8.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
000104b8   89 *16* r11 := r6 + 20
000104bc   90 *32* tmp1 := zfill(16,31,r11)
           91 *8* r8.x := m[tmp1]
000104c0   92 *j32* %flags := (r8.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: %flags
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6 + 6
000104cc   95 *32* tmp1 := zfill(16,31,r11)
           96 *8* r8.x := m[tmp1]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r11)
          100 *8* m[tmp1] := r8.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: %flags
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13]
000104ec  105 *j32* %flags := (r8.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: %flags
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4 + 4
000104f4  108 *32* tmp1 := zfill(16,31,r11)
          109 *8* r8.x := m[tmp1]
000104f8  110 *8* r8.x := (r8.x) & 192
000104fc  111 *8* r1 := r8.x
00010500  112 *16* r11 := r6 + 6
00010504  113 *32* tmp1 := zfill(16,31,r11)
          114 *8* r8.x := m[tmp1]
00010508  115 *8* r8.x := (r8.x) & 192
0001050c  116 *8* r8.x := (r8.x) | r1
00010510  117 *32* tmp1 := zfill(16,31,r11)
          118 *8* m[tmp1] := r8.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00010514  119 *16* r11 := r5 + 20
00010518  120 *32* tmp1 := zfill(16,31,r11)
          121 *8* r8.x := m[tmp1]
0001051c  122 *j32* %flags := (r8.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: %flags
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4 + 4
00010524  125 *32* tmp1 := zfill(16,31,r11)
          126 *8* r8.x := m[tmp1]
00010528  127 *8* r8.x := (r8.x) & 192
0001052c  128 *8* r1 := r8.x
00010530  129 *16* r11 := r6 + 6
00010534  130 *32* tmp1 := zfill(16,31,r11)
          131 *8* r8.x := m[tmp1]
00010538  132 *8* r8.x := (r8.x) & 192
0001053c  133 *8* r8.x := (r8.x) | r1
00010540  134 *32* tmp1 := zfill(16,31,r11)
          135 *8* m[tmp1] := r8.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00010544  136 RET
              Modifieds: 
              Reaching definitions: 
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end initial debug print after decoding for main ===

early decompile for main
### update call defines for main ###
placing phi functions 1st pass
numbering phi statements 1st pass
renaming block variables 1st pass
### rename block vars for main pass 1, clear = 1 ###
df.renameBlockVars return true

--- after rename (1) for main 1st pass
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: %flags{66}
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r11{68})
           70 *8* r8.x := m[tmp1{69}]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r11{68})
           73 *8* m[tmp1{72}] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: %flags{75}
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r11{77})
           79 *8* r8.x := m[tmp1{78}]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: %flags{80}
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r11{82})
           84 *8* r8.x := m[tmp1{83}]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r11{82})
           88 *8* m[tmp1{87}] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r11{89})
           91 *8* r8.x := m[tmp1{90}]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: %flags{92}
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r11{94})
           96 *8* r8.x := m[tmp1{95}]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r11{94})
          100 *8* m[tmp1{99}] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: %flags{102}
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: %flags{105}
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r11{107})
          109 *8* r8.x := m[tmp1{108}]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r11{112})
          114 *8* r8.x := m[tmp1{113}]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := (r8{-}.x) | r1{111}
00010510  117 *32* tmp1 := zfill(16,31,r11{112})
          118 *8* m[tmp1{117}] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r11{119})
          121 *8* r8.x := m[tmp1{120}]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: %flags{122}
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r11{124})
          126 *8* r8.x := m[tmp1{125}]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r11{129})
          131 *8* r8.x := m[tmp1{130}]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := (r8{-}.x) | r1{128}
00010540  134 *32* tmp1 := zfill(16,31,r11{129})
          135 *8* m[tmp1{134}] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET
              Modifieds: 
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r30{65},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544



=== done after rename (1) for main 1st pass

--- begin propagating statements pass 1 ---
propagating   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
	   into   67 BRANCH 0x104e0, condition equals
High level: %flags{66}
	 result   67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0

propagating   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
	   into   76 BRANCH 0x104b8, condition equals
High level: %flags{75}
	 result   76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1

propagating   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
	   into   81 BRANCH 0x104a4, condition equals
High level: %flags{80}
	 result   81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0

propagating   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
	   into   93 BRANCH 0x104c8, condition equals
High level: %flags{92}
	 result   93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0

propagating  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
	   into  103 BRANCH 0x10548, condition equals
High level: %flags{102}
	 result  103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1

propagating  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
	   into  106 BRANCH 0x10514, condition equals
High level: %flags{105}
	 result  106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1

propagating  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
	   into  123 BRANCH 0x10544, condition equals
High level: %flags{122}
	 result  123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1

propagating   68 *16* r11 := r6{-} + 20
	   into   69 *32* tmp1 := zfill(16,31,r11{68})
	 result   69 *32* tmp1 := zfill(16,31,r6{-} + 20)

propagating   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
	   into   70 *8* r8.x := m[tmp1{69}]
	 result   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]

propagating   68 *16* r11 := r6{-} + 20
	   into   72 *32* tmp1 := zfill(16,31,r11{68})
	 result   72 *32* tmp1 := zfill(16,31,r6{-} + 20)

propagating   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
	   into   73 *8* m[tmp1{72}] := r8{-}.x
	 result   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x

propagating   77 *16* r11 := r5{-} + 20
	   into   78 *32* tmp1 := zfill(16,31,r11{77})
	 result   78 *32* tmp1 := zfill(16,31,r5{-} + 20)

propagating   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
	   into   79 *8* r8.x := m[tmp1{78}]
	 result   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]

propagating   82 *16* r11 := r5{-} + 6
	   into   83 *32* tmp1 := zfill(16,31,r11{82})
	 result   83 *32* tmp1 := zfill(16,31,r5{-} + 6)

propagating   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
	   into   84 *8* r8.x := m[tmp1{83}]
	 result   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]

propagating   82 *16* r11 := r5{-} + 6
	   into   87 *32* tmp1 := zfill(16,31,r11{82})
	 result   87 *32* tmp1 := zfill(16,31,r5{-} + 6)

propagating   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
	   into   88 *8* m[tmp1{87}] := r8{-}.x
	 result   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x

propagating   89 *16* r11 := r6{-} + 20
	   into   90 *32* tmp1 := zfill(16,31,r11{89})
	 result   90 *32* tmp1 := zfill(16,31,r6{-} + 20)

propagating   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
	   into   91 *8* r8.x := m[tmp1{90}]
	 result   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]

propagating   94 *16* r11 := r6{-} + 6
	   into   95 *32* tmp1 := zfill(16,31,r11{94})
	 result   95 *32* tmp1 := zfill(16,31,r6{-} + 6)

propagating   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
	   into   96 *8* r8.x := m[tmp1{95}]
	 result   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]

propagating   94 *16* r11 := r6{-} + 6
	   into   99 *32* tmp1 := zfill(16,31,r11{94})
	 result   99 *32* tmp1 := zfill(16,31,r6{-} + 6)

propagating   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
	   into  100 *8* m[tmp1{99}] := r8{-}.x
	 result  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x

propagating  107 *16* r11 := r4{-} + 4
	   into  108 *32* tmp1 := zfill(16,31,r11{107})
	 result  108 *32* tmp1 := zfill(16,31,r4{-} + 4)

propagating  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
	   into  109 *8* r8.x := m[tmp1{108}]
	 result  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]

propagating  112 *16* r11 := r6{-} + 6
	   into  113 *32* tmp1 := zfill(16,31,r11{112})
	 result  113 *32* tmp1 := zfill(16,31,r6{-} + 6)

propagating  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
	   into  114 *8* r8.x := m[tmp1{113}]
	 result  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]

propagating  111 *8* r1 := r8{-}.x
	   into  116 *8* r8.x := (r8{-}.x) | r1{111}
	 result  116 *8* r8.x := (r8{-}.x) | (r8{-}.x)

propagating  112 *16* r11 := r6{-} + 6
	   into  117 *32* tmp1 := zfill(16,31,r11{112})
	 result  117 *32* tmp1 := zfill(16,31,r6{-} + 6)

propagating  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
	   into  118 *8* m[tmp1{117}] := r8{-}.x
	 result  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x

propagating  119 *16* r11 := r5{-} + 20
	   into  120 *32* tmp1 := zfill(16,31,r11{119})
	 result  120 *32* tmp1 := zfill(16,31,r5{-} + 20)

propagating  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
	   into  121 *8* r8.x := m[tmp1{120}]
	 result  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]

propagating  124 *16* r11 := r4{-} + 4
	   into  125 *32* tmp1 := zfill(16,31,r11{124})
	 result  125 *32* tmp1 := zfill(16,31,r4{-} + 4)

propagating  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
	   into  126 *8* r8.x := m[tmp1{125}]
	 result  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]

propagating  129 *16* r11 := r6{-} + 6
	   into  130 *32* tmp1 := zfill(16,31,r11{129})
	 result  130 *32* tmp1 := zfill(16,31,r6{-} + 6)

propagating  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
	   into  131 *8* r8.x := m[tmp1{130}]
	 result  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]

propagating  128 *8* r1 := r8{-}.x
	   into  133 *8* r8.x := (r8{-}.x) | r1{128}
	 result  133 *8* r8.x := (r8{-}.x) | (r8{-}.x)

propagating  129 *16* r11 := r6{-} + 6
	   into  134 *32* tmp1 := zfill(16,31,r11{129})
	 result  134 *32* tmp1 := zfill(16,31,r6{-} + 6)

propagating  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
	   into  135 *8* m[tmp1{134}] := r8{-}.x
	 result  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x

propagating   65 *union* r30 := r8{-}
	   into  136 RET
              Modifieds: 
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r30{65},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
	 result  136 RET
              Modifieds: 
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}

simplifying...
=== end propagating statements at pass 1 ===

--- after propagation (1) for main 1st pass ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
           70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
           73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
           79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
           84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
           88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
           91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
           96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
          100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
          109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
          114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
          118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
          121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
          126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
          131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
          135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET
              Modifieds: 
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544



=== done after propagation (1) for main 1st pass ===

### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
--- begin propagating statements pass 2 ---
simplifying...
=== end propagating statements at pass 2 ===

--- after call and phi bypass (1) of main ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
           70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
           73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
           79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
           84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
           88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
           91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
           96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
          100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
          109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
          114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
          118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
          121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
          126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
          131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
          135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET
              Modifieds: 
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544



=== done after call and phi bypass (1) of main ===

finding stack pointer preservation for main
finding preserveds for main
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
--- after preservation, bypass and propagation ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
           70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
           73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
           79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
           84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
           88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
           91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
           96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
          100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
          109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
          114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
          118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
          121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
          126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
          131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
          135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET
              Modifieds: 
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end after preservation, bypass and propagation ===
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
--- begin propagating statements pass 2 ---
simplifying...
=== end propagating statements at pass 2 ===
### update arguments for main ###
=== end update arguments for main
renaming block variables (2) pass 3
### rename block vars for main pass 3, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 3 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
           70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
           73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
           79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
           84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
           88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
           91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
           96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
          100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
          109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
          114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
          118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
          121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
          126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
          131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
          135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 3 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 3, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 3, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 3, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 3 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
           70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
           73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
           79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
           84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
           88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
           91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
           96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
          100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
          109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
          114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
          118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
          121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
          126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
          131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
          135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 3 ===

--- debug print SSA for main at pass 3 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
           70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
           73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
           79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
           84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
           88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
           91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
           96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
          100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
          109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
          114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
          118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
          121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
          126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
          131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
          135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 3 ===

propagating at pass 3
--- begin propagating statements pass 3 ---
simplifying...
=== end propagating statements at pass 3 ===
### rename block vars for main pass 3, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 3 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   69 *32* tmp1 := zfill(16,31,r6{-} + 20)
           70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   72 *32* tmp1 := zfill(16,31,r6{-} + 20)
           73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   78 *32* tmp1 := zfill(16,31,r5{-} + 20)
           79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   83 *32* tmp1 := zfill(16,31,r5{-} + 6)
           84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   87 *32* tmp1 := zfill(16,31,r5{-} + 6)
           88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          139 *v* tmp1 := phi{72 87}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   90 *32* tmp1 := zfill(16,31,r6{-} + 20)
           91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   95 *32* tmp1 := zfill(16,31,r6{-} + 6)
           96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8   99 *32* tmp1 := zfill(16,31,r6{-} + 6)
          100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          144 *v* tmp1 := phi{- 99}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  108 *32* tmp1 := zfill(16,31,r4{-} + 4)
          109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  113 *32* tmp1 := zfill(16,31,r6{-} + 6)
          114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  117 *32* tmp1 := zfill(16,31,r6{-} + 6)
          118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
          150 *v* tmp1 := phi{144 117}
00010514  119 *16* r11 := r5{-} + 20
00010518  120 *32* tmp1 := zfill(16,31,r5{-} + 20)
          121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  125 *32* tmp1 := zfill(16,31,r4{-} + 4)
          126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  130 *32* tmp1 := zfill(16,31,r6{-} + 6)
          131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  134 *32* tmp1 := zfill(16,31,r6{-} + 6)
          135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          153 *v* tmp1 := phi{120 134 144}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 3 ===

before removing matching assigns (t[WILDSTR]).
after removing matching assigns (t[WILDSTR]).
renaming block variables (2) pass 4
### rename block vars for main pass 4, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 4 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 4 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 4, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 4, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 4, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 4 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 4 ===

--- debug print SSA for main at pass 4 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 4 ===

propagating at pass 4
--- begin propagating statements pass 4 ---
simplifying...
=== end propagating statements at pass 4 ===
### rename block vars for main pass 4, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 4 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 4 ===

renaming block variables (2) pass 5
### rename block vars for main pass 5, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 5 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 5 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 5, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 5, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 5, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 5 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 5 ===

--- debug print SSA for main at pass 5 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 5 ===

propagating at pass 5
--- begin propagating statements pass 5 ---
simplifying...
=== end propagating statements at pass 5 ===
### rename block vars for main pass 5, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 5 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 5 ===

renaming block variables (2) pass 6
### rename block vars for main pass 6, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 6 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 6 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 6, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 6, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 6, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 6 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 6 ===

--- debug print SSA for main at pass 6 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 6 ===

propagating at pass 6
--- begin propagating statements pass 6 ---
simplifying...
=== end propagating statements at pass 6 ===
### rename block vars for main pass 6, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 6 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 6 ===

renaming block variables (2) pass 7
### rename block vars for main pass 7, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 7 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 7 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 7, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 7, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 7, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 7 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 7 ===

--- debug print SSA for main at pass 7 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 7 ===

propagating at pass 7
--- begin propagating statements pass 7 ---
simplifying...
=== end propagating statements at pass 7 ===
### rename block vars for main pass 7, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 7 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 7 ===

renaming block variables (2) pass 8
### rename block vars for main pass 8, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 8 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 8 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 8, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 8, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 8, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 8 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 8 ===

--- debug print SSA for main at pass 8 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 8 ===

propagating at pass 8
--- begin propagating statements pass 8 ---
simplifying...
=== end propagating statements at pass 8 ===
### rename block vars for main pass 8, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 8 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 8 ===

renaming block variables (2) pass 9
### rename block vars for main pass 9, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 9 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 9 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 9, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 9, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 9, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 9 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 9 ===

--- debug print SSA for main at pass 9 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 9 ===

propagating at pass 9
--- begin propagating statements pass 9 ---
simplifying...
=== end propagating statements at pass 9 ===
### rename block vars for main pass 9, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 9 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 9 ===

renaming block variables (2) pass 10
### rename block vars for main pass 10, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 10 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 10 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 10, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 10, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 10, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 10 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 10 ===

--- debug print SSA for main at pass 10 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 10 ===

propagating at pass 10
--- begin propagating statements pass 10 ---
simplifying...
=== end propagating statements at pass 10 ===
### rename block vars for main pass 10, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 10 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 10 ===

renaming block variables (2) pass 11
### rename block vars for main pass 11, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 11 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 11 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 11, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 11, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 11, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 11 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 11 ===

--- debug print SSA for main at pass 11 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 11 ===

propagating at pass 11
--- begin propagating statements pass 11 ---
simplifying...
=== end propagating statements at pass 11 ===
### rename block vars for main pass 11, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 11 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 11 ===

renaming block variables (2) pass 12
### rename block vars for main pass 12, clear = 0 ###
df.renameBlockVars return true
--- debug print SSA for main pass 12 (no propagations) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main pass 12 (no propagations) ===

### update returns loop iteration 0 ###
### rename block vars for main pass 12, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 1 ###
### rename block vars for main pass 12, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
### update returns loop iteration 2 ###
### rename block vars for main pass 12, clear = 1 ###
df.renameBlockVars return true
finding preserveds for main
### update call defines for main ###
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- debug print SSA for main at pass 12 (after updating returns) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 12 ===

--- debug print SSA for main at pass 12 (after trimming return set) ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end debug print SSA for main at pass 12 ===

propagating at pass 12
--- begin propagating statements pass 12 ---
simplifying...
=== end propagating statements at pass 12 ===
### rename block vars for main pass 12, clear = 1 ###
df.renameBlockVars return true
--- after propagate for main at pass 12 ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end propagate for main at pass 12 ===

### allowing SSA renaming of all memof expressions ###
setting phis, renaming block variables after memofs renamable pass 14
### rename block vars for main pass 14, clear = 0 ###
df.renameBlockVars return true
--- after setting phis for memofs, renaming them for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== done after setting phis for memofs, renaming them for main
--- begin propagating statements pass 14 ---
simplifying...
=== end propagating statements at pass 14 ===
### start fix call and phi bypass analysis for main ###
### rename block vars for main pass 2, clear = 0 ###
df.renameBlockVars return true
### end fix call and phi bypass analysis for main ###
finding preserveds for main
--- after replacing expressions, trimming params and returns for main ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00010474    1 *8* r8.x := m[r7{-} + 1]
              *union* IMP REF r8{-}
            3 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            5 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            7 *union* r30 := r8{-}
              *union* IMP REF r8{-}
            9 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           11 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           13 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           15 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           17 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           19 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           21 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           23 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           25 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           27 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           29 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           31 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           33 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           35 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           37 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           39 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           41 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           43 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           45 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           47 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           49 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           51 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           53 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           55 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           57 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           59 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           61 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           63 *union* r30 := r8{-}
              *union* IMP REF r8{-}
           65 *union* r30 := r8{-}
00010478   66 *j32* %flags := (r8{-}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{-}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *16* r11 := r6{-} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{-} + 20)] := r8{-}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{-}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{-}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *16* r11 := r5{-} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001049c   80 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *16* r11 := r5{-} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{-} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{-} + 6)] := r8{-}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *16* r11 := phi{68 82}
          140 *v* %flags := phi{75 80}
          141 *v* %ZF := phi{75 80}
          142 *v* %CF := phi{75 80}
000104b8   89 *16* r11 := r6{-} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{-} + 20)]
000104c0   92 *j32* %flags := (r8{-}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{-}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *16* r11 := r6{-} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *16* r11 := phi{- 94}
          145 *v* %flags := phi{66 92}
          146 *v* %ZF := phi{66 92}
          147 *v* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{-}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{-}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{-}]
000104ec  105 *j32* %flags := (r8{-}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{-}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{-} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
000104f8  110 *8* r8.x := (r8{-}.x) & 192
000104fc  111 *8* r1 := r8{-}.x
00010500  112 *16* r11 := r6{-} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010508  115 *8* r8.x := (r8{-}.x) & 192
0001050c  116 *8* r8.x := r8{-}.x
00010510  118 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{- 111}
          149 *16* r11 := phi{143 112}
00010514  119 *16* r11 := r5{-} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{-} + 20)]
0001051c  122 *j32* %flags := (r8{-}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{-}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{-} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{-} + 4)]
00010528  127 *8* r8.x := (r8{-}.x) & 192
0001052c  128 *8* r1 := r8{-}.x
00010530  129 *16* r11 := r6{-} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{-} + 6)]
00010538  132 *8* r8.x := (r8{-}.x) & 192
0001053c  133 *8* r8.x := r8{-}.x
00010540  135 *8* m[zfill(16,31,r6{-} + 6)] := r8{-}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 -}
          152 *16* r11 := phi{119 129 143}
          154 *v* %flags := phi{122 122 102}
          155 *v* %ZF := phi{122 122 102}
          156 *v* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *16* r11 := r11{152},   *8* r30 := r8{-}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{-},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end after replacing expressions, trimming params and returns for main ===
### eliminate duplicate args for main ###
===== end early decompile for main =====

--- remove unused statements for main ---
### type analysis for main ###
--- start data flow based type analysis for main ---
WARNING: size 0x10 meet with char *[] *; allowing temporarily
size 0x10 meet with size 0x8!
size 0x8 meet with size 0x10!
size 0x10 meet with size 0x8!
size 0x8 meet with size 0x10!
WARNING: size 0x8 meet with __size8 *; allowing temporarily
size 0x10 meet with size 0x8!
size 0x8 meet with size 0x10!
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure main ###
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
naming new global: global0 at address 0x104e0
globalUsed: name global0, address 0x104e0, known type void
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7b68
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7b50
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
naming new global: global1 at address 0x104b8
globalUsed: name global1, address 0x104b8, known type void
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
naming new global: global2 at address 0x104a4
globalUsed: name global2, address 0x104a4, known type void
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7ac8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7ab8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
naming new global: global3 at address 0x104c8
globalUsed: name global3, address 0x104c8, known type void
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7a40
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7a30
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x38
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
naming new global: global4 at address 0x10548
globalUsed: name global4, address 0x10548, known type void
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
naming new global: global5 at address 0x10514
globalUsed: name global5, address 0x10514, known type void
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x4
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x4
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
globalUsed: name call___do_global_ctors_aux, address 0x10544, known type void
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x4
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x4
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
### after application of dfa type analysis for main ###
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
            3 *union* r30 := r8{0}
              *union* IMP REF r8{0}
            5 *union* r30 := r8{0}
              *union* IMP REF r8{0}
            7 *union* r30 := r8{0}
              *union* IMP REF r8{0}
            9 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           11 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           13 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           15 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           17 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           19 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           21 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           23 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           25 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           27 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           29 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           31 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           33 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           35 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           37 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           39 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           41 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           43 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           45 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           47 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           49 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           51 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           53 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           55 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           57 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           59 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           61 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           63 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           65 *union* r30 := r8{0}
00010478   66 *j32* %flags := (r8{0}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *union* r11 := r6{0} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{0}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *union* r11 := r5{0} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   80 *j32* %flags := (r8{0}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *union* r11 := r5{0} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *union* r11 := phi{68 82}
          140 *j32* %flags := phi{75 80}
          141 *j32* %ZF := phi{75 80}
          142 *j32* %CF := phi{75 80}
000104b8   89 *union* r11 := r6{0} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   92 *j32* %flags := (r8{0}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
          145 *j32* %flags := phi{66 92}
          146 *j32* %ZF := phi{66 92}
          147 *j32* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{0}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  105 *j32* %flags := (r8{0}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{0} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500  112 *union* r11 := r6{0} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
          149 *union* r11 := phi{143 112}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  122 *j32* %flags := (r8{0}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{0} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
          154 *j32* %flags := phi{122 122 102}
          155 *j32* %ZF := phi{122 122 102}
          156 *j32* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r11=r11{152},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


### end application of dfa type analysis for main ###
simplifying...
=== end type analysis for main ===
### rename block vars for main pass 20, clear = 0 ###
df.renameBlockVars return true
--- begin propagating statements pass 20 ---
simplifying...
=== end propagating statements at pass 20 ===
--- after propagating locals for main ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
            3 *union* r30 := r8{0}
              *union* IMP REF r8{0}
            5 *union* r30 := r8{0}
              *union* IMP REF r8{0}
            7 *union* r30 := r8{0}
              *union* IMP REF r8{0}
            9 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           11 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           13 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           15 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           17 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           19 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           21 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           23 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           25 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           27 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           29 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           31 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           33 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           35 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           37 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           39 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           41 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           43 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           45 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           47 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           49 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           51 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           53 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           55 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           57 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           59 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           61 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           63 *union* r30 := r8{0}
              *union* IMP REF r8{0}
           65 *union* r30 := r8{0}
00010478   66 *j32* %flags := (r8{0}.x.m.bit1)*8* ~= 0
           67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c   68 *union* r11 := r6{0} + 20
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   75 *j32* %flags := (r8{0}.x.m.bit3)*8* ~= 1
           76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494   77 *union* r11 := r5{0} + 20
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   80 *j32* %flags := (r8{0}.x.m.bit5)*8* ~= 0
           81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4   82 *union* r11 := r5{0} + 6
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000  138 *union* r11 := phi{68 82}
          140 *j32* %flags := phi{75 80}
          141 *j32* %ZF := phi{75 80}
          142 *j32* %CF := phi{75 80}
000104b8   89 *union* r11 := r6{0} + 20
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   92 *j32* %flags := (r8{0}.x.m.bit5)*8* ~= 0
           93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
          145 *j32* %flags := phi{66 92}
          146 *j32* %ZF := phi{66 92}
          147 *j32* %CF := phi{66 92}
000104e0  101 *8* r8.x := m[56]
000104e4  102 *j32* %flags := (r8{0}.x.m.bit6)*8* ~= 1
          103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  105 *j32* %flags := (r8{0}.x.m.bit2)*8* ~= 1
          106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0  107 *16* r11 := r4{0} + 4
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500  112 *union* r11 := r6{0} + 6
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
          149 *union* r11 := phi{143 112}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  122 *j32* %flags := (r8{0}.x.m.bit4)*8* ~= 1
          123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520  124 *16* r11 := r4{0} + 4
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
          154 *j32* %flags := phi{122 122 102}
          155 *j32* %ZF := phi{122 122 102}
          156 *j32* %CF := phi{122 122 102}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},
                r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},   %ZF=%ZF{155},
                %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end after propagating locals for main ===

### removing call livenesses for main ###
### rename block vars for main pass -2, clear = 0 ###
df.renameBlockVars return true
--- after removing unused and null statements pass 1 for main ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: 
end parameters
locals:
end locals
symbols:
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},
                r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},   %ZF=%ZF{155},
                %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end after removing unused statements for main ===

--- after adding new parameters ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
            0 *v* r9 := -
            0 *v* r10 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},
                r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},   %ZF=%ZF{155},
                %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end after adding new parameters ===
### updateCalls for main ###
### update call defines for main ###
### update arguments for main ###
=== end update arguments for main
--- after update calls for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
            0 *v* r9 := -
            0 *v* r10 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},
                r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},   %ZF=%ZF{155},
                %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== after update calls for main
### fixUglyBranches for main ###
--- after fixUglyBranches for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
            0 *v* r9 := -
            0 *v* r10 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},
                r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},   %ZF=%ZF{155},
                %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== after fixUglyBranches for main
--- after remove unused statements etc for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
            0 *v* r9 := -
            0 *v* r10 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},
                r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},   %ZF=%ZF{155},
                %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== after remove unused statements etc for main
end decompile(main)
### start global data-flow-based type analysis ###
### type analysis for main ###
--- start data flow based type analysis for main ---
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure main ###
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7b68
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7b50
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7ac8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7ab8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7a40
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x824a22e
refusing to create a global at address that is in no known section of the binary: 0xa2c7a30
refusing to create a global at address that is in no known section of the binary: 0x0
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x38
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x4
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x14
refusing to create a global at address that is in no known section of the binary: 0x8
refusing to create a global at address that is in no known section of the binary: 0x1
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x4
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0xc0
refusing to create a global at address that is in no known section of the binary: 0x824a22c
refusing to create a global at address that is in no known section of the binary: 0x10
refusing to create a global at address that is in no known section of the binary: 0x1f
refusing to create a global at address that is in no known section of the binary: 0x6
### after application of dfa type analysis for main ###
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *[c*]** r11 := -
            0 *8** r13 := -
            0 *16* r4 := -
            0 *8* r1 := -
            0 *i32* r9 := -
            0 *[c*]** r10 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8   94 *union* r11 := r6{0} + 6
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000  143 *union* r11 := phi{0 94}
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc  111 *8* r1 := r8{0}.x
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000  148 *8* r1 := phi{0 111}
00010514  119 *union* r11 := r5{0} + 20
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c  128 *8* r1 := r8{0}.x
00010530  129 *union* r11 := r6{0} + 6
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000  151 *8* r1 := phi{148 128 0}
          152 *union* r11 := phi{119 129 143}
00010544  136 RET *8* r1 := r1{151},   *union* r11 := r11{152},   *union* r30 := r8{0}
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},
                r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},   %ZF=%ZF{155},
                %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


### end application of dfa type analysis for main ###
simplifying...
=== end type analysis for main ===
### end type analysis ###
prog: global removing unused returns
### removing call livenesses for main ###
### rename block vars for main pass -3, clear = 1 ###
df.renameBlockVars return true
--- remove unused statements for main ---
### removing call livenesses for main ###
### rename block vars for main pass -2, clear = 0 ###
df.renameBlockVars return true
--- after removing unused and null statements pass 1 for main ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** r13 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end after removing unused statements for main ===

--- after adding new parameters ---
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** r13 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== end after adding new parameters ===
### updateCalls for main ###
### update call defines for main ###
### update arguments for main ###
=== end update arguments for main
--- after update calls for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** r13 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== after update calls for main
### fixUglyBranches for main ###
--- after fixUglyBranches for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** r13 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== after fixUglyBranches for main
--- after remove unused statements etc for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** r13 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


=== after remove unused statements etc for main
transforming from SSA
===== before transformation from SSA form for main =====
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 r9, [c*]* r10, [c*]* r11
end parameters
locals:
end locals
symbols:
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* r8 := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** r13 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7{0} + 1]
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
              *union* IMP REF r8{0}
00010478   67 BRANCH 0x104e0, condition equals
High level: (r8{0}.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (r8{0}.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (r8{0}.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (r8{0}.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[r13{0}]
000104ec  106 BRANCH 0x10514, condition equals
High level: (r8{0}.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
000104f8  110 *j8* r8.x := (r8{0}.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010508  115 *j8* r8.x := (r8{0}.x) & 192
0001050c  116 *8* r8.x := r8{0}.x
00010510  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (r8{0}.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
00010528  127 *j8* r8.x := (r8{0}.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
00010538  132 *j8* r8.x := (r8{0}.x) & 192
0001053c  133 *8* r8.x := r8{0}.x
00010540  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


===== end before transformation from SSA for main =====

transforming main from SSA
got type 8 for r7 from    0 *8* r7 := -
got type union for r8 from    0 *union* r8 := -
got type union for r6 from    0 *union* r6 := -
got type union for r5 from    0 *union* r5 := -
got type 8* for r13 from    0 *8** r13 := -
got type 16 for r4 from    0 *16* r4 := -
got type 8 for r8.x from    1 *8* r8.x := m[r7{0} + 1]
got type 8 for r8.x from   70 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
got type 8 for r8.x.m.bit5 from   71 *8* r8.x.m.bit5 := 1
got type 8 for m[zfill(16,31,r6{0} + 20)] from   73 *8* m[zfill(16,31,r6{0} + 20)] := r8{0}.x
got type 8 for r8.x.m.bit3 from   74 *8* r8.x.m.bit3 := 0
got type 8 for r8.x from   79 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
got type 8 for r8.x from   84 *8* r8.x := m[zfill(16,31,r5{0} + 6)]
got type 8 for r8.x.m.bit7 from   85 *8* r8.x.m.bit7 := 0
got type 8 for r8.x.m.bit6 from   86 *8* r8.x.m.bit6 := 0
got type 8 for m[zfill(16,31,r5{0} + 6)] from   88 *8* m[zfill(16,31,r5{0} + 6)] := r8{0}.x
got type 8 for r8.x from   91 *8* r8.x := m[zfill(16,31,r6{0} + 20)]
got type 8 for r8.x from   96 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
got type 8 for r8.x.m.bit7 from   97 *8* r8.x.m.bit7 := 0
got type 8 for r8.x.m.bit6 from   98 *8* r8.x.m.bit6 := 0
got type 8 for m[zfill(16,31,r6{0} + 6)] from  100 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
got type 8 for r8.x from  101 *8* r8.x := m[56]
got type 8 for r8.x from  104 *8* r8.x := m[r13{0}]
got type 8 for r8.x from  109 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
got type j8 for r8.x from  110 *j8* r8.x := (r8{0}.x) & 192
got type 8 for r8.x from  114 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
got type j8 for r8.x from  115 *j8* r8.x := (r8{0}.x) & 192
got type 8 for r8.x from  116 *8* r8.x := r8{0}.x
got type 8 for m[zfill(16,31,r6{0} + 6)] from  118 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
got type 8 for r8.x from  121 *8* r8.x := m[zfill(16,31,r5{0} + 20)]
got type 8 for r8.x from  126 *8* r8.x := m[zfill(16,31,r4{0} + 4)]
got type j8 for r8.x from  127 *j8* r8.x := (r8{0}.x) & 192
got type 8 for r8.x from  131 *8* r8.x := m[zfill(16,31,r6{0} + 6)]
got type j8 for r8.x from  132 *j8* r8.x := (r8{0}.x) & 192
got type 8 for r8.x from  133 *8* r8.x := r8{0}.x
got type 8 for m[zfill(16,31,r6{0} + 6)] from  135 *8* m[zfill(16,31,r6{0} + 6)] := r8{0}.x
got type 8 for r1 from  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
got type 16 for r11 from  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
got type 8 for r30 from  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1{151},   r4=r4{0},   r5=r5{0},   r6=r6{0},   r7=r7{0},   r8=r8{0},   r9=r9{0},
                r10=r10{0},   r11=r11{152},   r13=r13{0},   r30=r8{0},   tmp1=tmp1{153},   %flags=%flags{154},
                %ZF=%ZF{155},   %CF=%CF{156}
===== after transformation from SSA form for main =====
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 argc, [c*]* argv, [c*]* envp
end parameters
locals:
union { __size8 x; struct { __size8 bit1; __size8 bit2; __size8 bit3; __size8 bit4; __size8 bit5; __size8 bit6; __size8 bit7; __size8 bit8; } m; } a r8
__size8 * p0 r13
__size16 r4 r4
union { char *[] * x1; __size16 x2; } r5 r5
union { char *[] * x1; __size16 x2; } r6 r6
__size8 r7 r7
end locals
symbols:
  r4 maps to r4 type __size16
  r5 maps to r5 type union { char *[] * x1; __size16 x2; }
  r6 maps to r6 type union { char *[] * x1; __size16 x2; }
  r7 maps to r7 type __size8
  r8 maps to a type union { __size8 x; struct { __size8 bit1; __size8 bit2; __size8 bit3; __size8 bit4; __size8 bit5; __size8 bit6; __size8 bit7; __size8 bit8; } m; }
  r13 maps to p0 type __size8 *
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* a := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** p0 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7 + 1]
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
00010478   67 BRANCH 0x104e0, condition equals
High level: (a.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6 + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6 + 20)] := a.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (a.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5 + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (a.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5 + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5 + 6)] := a.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6 + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (a.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6 + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6 + 6)] := a.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10548 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (a.x.m.bit6)*8* ~= 1
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[p0]
000104ec  106 BRANCH 0x10514, condition equals
High level: (a.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4 + 4)]
000104f8  110 *j8* r8.x := (a.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6 + 6)]
00010508  115 *j8* r8.x := (a.x) & 192
0001050c  116 *8* r8.x := a.x
00010510  118 *8* m[zfill(16,31,r6 + 6)] := a.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5 + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (a.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4 + 4)]
00010528  127 *j8* r8.x := (a.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6 + 6)]
00010538  132 *j8* r8.x := (a.x) & 192
0001053c  133 *8* r8.x := a.x
00010540  135 *8* m[zfill(16,31,r6 + 6)] := a.x
L7: Ret BB:
in edges: 1051c 10540 10548 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1,   r4=r4,   r5=r5,   r6=r6,   r7=r7,   r8=a,   r9=argc,   r10=argv,   r11=r11
                r13=p0,   r30=a,   tmp1=tmp1,   %flags=%flags,   %ZF=%ZF,   %CF=%CF
L5: Oneway BB:
in edges: 104e4 
out edges: 10544 
00010548  137 GOTO 0x10544


===== end after transformation from SSA for main =====

removing unused globals
removing unused locals (final) for main
*forced* { int r8 } main(int argc r9, char *[] * argv r10, char *[] * envp r11)
in cluster elf-init
parameters: i32 argc, [c*]* argv, [c*]* envp
end parameters
locals:
union { __size8 x; struct { __size8 bit1; __size8 bit2; __size8 bit3; __size8 bit4; __size8 bit5; __size8 bit6; __size8 bit7; __size8 bit8; } m; } a r8
__size8 * p0 r13
__size16 r4 r4
union { char *[] * x1; __size16 x2; } r5 r5
union { char *[] * x1; __size16 x2; } r6 r6
__size8 r7 r7
end locals
symbols:
  r4 maps to r4 type __size16
  r5 maps to r5 type union { char *[] * x1; __size16 x2; }
  r6 maps to r6 type union { char *[] * x1; __size16 x2; }
  r7 maps to r7 type __size8
  r8 maps to a type union { __size8 x; struct { __size8 bit1; __size8 bit2; __size8 bit3; __size8 bit4; __size8 bit5; __size8 bit6; __size8 bit7; __size8 bit8; } m; }
  r13 maps to p0 type __size8 *
  r9{0} maps to argc type int
  r10{0} maps to argv type char *[] *
  r11{0} maps to envp type char *[] *
end symbols
live variables: r4,  r5,  r6,  r7,  r8,  r13
end live variables
Twoway BB:
in edges: 
out edges: 104e0 1047c 
00000000    0 *8* r7 := -
            0 *union* a := -
            0 *union* r6 := -
            0 *union* r5 := -
            0 *8** p0 := -
            0 *16* r4 := -
00010474    1 *8* r8.x := m[r7 + 1]
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
              *union* IMP REF a
00010478   67 BRANCH 0x104e0, condition equals
High level: (a.x.m.bit1)*8* ~= 0
Twoway BB:
in edges: 10478 
out edges: 104b8 10494 
0001047c
00010480   70 *8* r8.x := m[zfill(16,31,r6 + 20)]
00010484   71 *8* r8.x.m.bit5 := 1
00010488   73 *8* m[zfill(16,31,r6 + 20)] := a.x
0001048c   74 *8* r8.x.m.bit3 := 0
00010490   76 BRANCH 0x104b8, condition equals
High level: (a.x.m.bit3)*8* ~= 1
Twoway BB:
in edges: 10490 
out edges: 104a4 104a0 
00010494
00010498   79 *8* r8.x := m[zfill(16,31,r5 + 20)]
0001049c   81 BRANCH 0x104a4, condition equals
High level: (a.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 1049c 
out edges: 104a4 
000104a0
L3: Fall BB:
in edges: 1049c 104a0 
out edges: 104b8 
000104a4
000104a8   84 *8* r8.x := m[zfill(16,31,r5 + 6)]
000104ac   85 *8* r8.x.m.bit7 := 0
000104b0   86 *8* r8.x.m.bit6 := 0
000104b4   88 *8* m[zfill(16,31,r5 + 6)] := a.x
L2: Twoway BB:
in edges: 10490 104b4 
out edges: 104c8 104c4 
00000000
000104b8
000104bc   91 *8* r8.x := m[zfill(16,31,r6 + 20)]
000104c0   93 BRANCH 0x104c8, condition equals
High level: (a.x.m.bit5)*8* ~= 0
Fall BB:
in edges: 104c0 
out edges: 104c8 
000104c4
L4: Fall BB:
in edges: 104c0 104c4 
out edges: 104e0 
000104c8
000104cc   96 *8* r8.x := m[zfill(16,31,r6 + 6)]
000104d0   97 *8* r8.x.m.bit7 := 0
000104d4   98 *8* r8.x.m.bit6 := 0
000104d8  100 *8* m[zfill(16,31,r6 + 6)] := a.x
000104dc
L1: Twoway BB:
in edges: 10478 104dc 
out edges: 10544 104e8 
00000000
000104e0  101 *8* r8.x := m[56]
000104e4  103 BRANCH 0x10548, condition equals
High level: (a.x.m.bit6)*8* ~= 1
Synthetic out edge(s) to L7 
Twoway BB:
in edges: 104e4 
out edges: 10514 104f0 
000104e8  104 *8* r8.x := m[p0]
000104ec  106 BRANCH 0x10514, condition equals
High level: (a.x.m.bit2)*8* ~= 1
Fall BB:
in edges: 104ec 
out edges: 10514 
000104f0
000104f4  109 *8* r8.x := m[zfill(16,31,r4 + 4)]
000104f8  110 *j8* r8.x := (a.x) & 192
000104fc
00010500
00010504  114 *8* r8.x := m[zfill(16,31,r6 + 6)]
00010508  115 *j8* r8.x := (a.x) & 192
0001050c  116 *8* r8.x := a.x
00010510  118 *8* m[zfill(16,31,r6 + 6)] := a.x
L6: Twoway BB:
in edges: 104ec 10510 
out edges: 10544 10520 
00000000
00010514
00010518  121 *8* r8.x := m[zfill(16,31,r5 + 20)]
0001051c  123 BRANCH 0x10544, condition equals
High level: (a.x.m.bit4)*8* ~= 1
Fall BB:
in edges: 1051c 
out edges: 10544 
00010520
00010524  126 *8* r8.x := m[zfill(16,31,r4 + 4)]
00010528  127 *j8* r8.x := (a.x) & 192
0001052c
00010530
00010534  131 *8* r8.x := m[zfill(16,31,r6 + 6)]
00010538  132 *j8* r8.x := (a.x) & 192
0001053c  133 *8* r8.x := a.x
00010540  135 *8* m[zfill(16,31,r6 + 6)] := a.x
L7: Ret BB:
in edges: 1051c 10540 104e4 
out edges: 
00000000
00010544  136 RET
              Modifieds: *8* r1,  *16* r11,  *8* r30
              Reaching definitions: r1=r1,   r4=r4,   r5=r5,   r6=r6,   r7=r7,   r8=a,   r9=argc,   r10=argv,   r11=r11
                r13=p0,   r30=a,   tmp1=tmp1,   %flags=%flags,   %ZF=%ZF,   %CF=%CF


type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x.m.bit1
type failure: no type for subexp1 of a.x.m
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of r8.x.m.bit5
type failure: no type for subexp1 of r8.x.m
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x.m.bit3
type failure: no type for subexp1 of r8.x.m
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x.m.bit3
type failure: no type for subexp1 of a.x.m
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x.m.bit5
type failure: no type for subexp1 of a.x.m
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of r8.x.m.bit7
type failure: no type for subexp1 of r8.x.m
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of r8.x.m.bit6
type failure: no type for subexp1 of r8.x.m
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x.m.bit5
type failure: no type for subexp1 of a.x.m
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of r8.x.m.bit7
type failure: no type for subexp1 of r8.x.m
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of r8.x.m.bit6
type failure: no type for subexp1 of r8.x.m
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x.m.bit6
type failure: no type for subexp1 of a.x.m
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x.m.bit2
type failure: no type for subexp1 of a.x.m
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x.m.bit4
type failure: no type for subexp1 of a.x.m
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x
type failure: no type for subexp1 of r8.x
WARNING: CHLLCode::appendExp: case opRegOf is deprecated
type failure: no type for subexp1 of a.x
WARNING: CHLLCode::appendExp: case opZfill is deprecated
type failure: no type for subexp1 of a.x
