got filename elf-init.c for main
after removing matching assigns (t[WILDSTR]).
### type analysis for ABCDEFG ###
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure ABCDEFG ###
finding final parameters for ABCDEFG
potential param r11
found new parameter r11
### type analysis for main ###
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure main ###
### type analysis for main ###
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure main ###
### type analysis for ABCDEFG ###
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure ABCDEFG ###
finding final parameters for ABCDEFG
*forced* { int r8 } main(int argc r8, char *[] * argv r9, char *[] * envp r10)
in cluster elf-init
parameters: i32 argc, [c*]* argv, [c*]* envp
end parameters
locals:
__size8 a r8
end locals
symbols:
  r8 maps to a type __size8
  r8{0} maps to argc type int
  r9{0} maps to argv type char *[] *
  r10{0} maps to envp type char *[] *
end symbols
live variables: r11
end live variables
Call BB:
in edges: 
out edges: 10478 
00000000
00010474    1 {*8* a, *16* r11} := CALL ABCDEFG(
              )
              Reaching definitions: r8=r8{0},   r9=r9{0},   r10=r10{0},   r11=r11{0}
              Live variables: a
Ret BB:
in edges: 10474 
out edges: 
00010478    2 RET *8* a := a
              Modifieds: *8* a,  *16* r11
              Reaching definitions: a=a,   r9=argv,   r10=envp,   r11=r11


void ABCDEFG()
in cluster sparcbinary
parameters: 
end parameters
locals:
__size8 a r8
end locals
symbols:
  r8 maps to a type __size8
  r11{0} maps to param1 type NULL
end symbols
live variables: r1
end live variables
Twoway BB:
in edges: 
out edges: 104e8 10484 
00000000
0001047c
00010480    3 BRANCH 0x104e8, condition equals
High level: m[630] ~= 0
Twoway BB:
in edges: 10480 
out edges: 104c0 1049c 
00010484
00010488    6 *8* a := m[0x3ee]
0001048c    7 *8* m[223] := 1
00010490    9 *8* m[0x3ee] := a
00010494   10 *8* m[0x405] := 0
00010498   12 BRANCH 0x104c0, condition equals
High level: m[0x405] ~= 1
Twoway BB:
in edges: 10498 
out edges: 104ac 104a8 
0001049c
000104a0
000104a4   17 BRANCH 0x104ac, condition equals
High level: m[223] ~= 0
Fall BB:
in edges: 104a4 
out edges: 104ac 
000104a8
L3: Fall BB:
in edges: 104a4 104a8 
out edges: 104c0 
000104ac
000104b0   20 *8* a := m[883]
000104b4   21 *8* m[158] := 0
000104b8   22 *8* m[962] := 0
000104bc   24 *8* m[883] := a
L2: Twoway BB:
in edges: 10498 104bc 
out edges: 104d0 104cc 
00000000
000104c0
000104c4
000104c8   29 BRANCH 0x104d0, condition equals
High level: m[223] ~= 0
Fall BB:
in edges: 104c8 
out edges: 104d0 
000104cc
L4: Fall BB:
in edges: 104c8 104cc 
out edges: 104e8 
000104d0
000104d4   32 *8* a := m[992]
000104d8   33 *8* m[158] := 0
000104dc   34 *8* m[962] := 0
000104e0   36 *8* m[992] := a
000104e4
L1: Twoway BB:
in edges: 10480 104e4 
out edges: 1054c 104f0 
00000000
000104e8   37 *j8* a := m[56]
000104ec   39 BRANCH 0x10550, condition equals
High level: m[962] ~= 1
Synthetic out edge(s) to L7 
Twoway BB:
in edges: 104ec 
out edges: 1051c 104f8 
000104f0
000104f4   42 BRANCH 0x1051c, condition equals
High level: m[167] ~= 1
Fall BB:
in edges: 104f4 
out edges: 1051c 
000104f8
000104fc   45 *j8* a := m[0x3fb]
00010500
00010504   47 *j8* m[9] := a & 192
00010508
0001050c   50 *j8* a := m[992]
00010510
00010514   52 *j8* a := (a & 192) | m[9]
00010518   54 *j8* m[992] := a
L6: Twoway BB:
in edges: 104f4 10518 
out edges: 1054c 10528 
00000000
0001051c
00010520   57 *j8* a := m[897]
00010524   59 BRANCH 0x1054c, condition equals
High level: m[235] ~= 1
Fall BB:
in edges: 10524 
out edges: 1054c 
00010528
0001052c   62 *j8* a := m[0x3fb]
00010530
00010534   64 *j8* m[9] := a & 192
00010538
0001053c   67 *j8* a := m[992]
00010540
00010544   69 *j8* a := (a & 192) | m[9]
00010548   71 *j8* m[992] := a
L7: Ret BB:
in edges: 10524 10548 104ec 
out edges: 
00000000
0001054c   72 RET *j8* a := a
              Modifieds: *8* a,  *16* r11
              Reaching definitions: r1=r1,   a=a,   r11=r11,   tmp1=tmp1,   %flags=%flags,   %ZF=%ZF,   %CF=%CF


