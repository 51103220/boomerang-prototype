MAX8BITS := 0xFF;

ADDRESSBITS := 8;

INTEGER
[%r0, %r1, %r2, %r3, %r4, %r5, %r6, %r7, %a, %b][8] -> 0..9,
[%dptr][16] -> 10,#0..15,
[%pc][32] -> -1,
%sp[32] -> 88;

add_signed_pc(param) {
  *32* tmp5 := %pc + param
  *32* tmp5 := [param < 128 ? tmp5 : tmp5 - 256]
};

# 0x00
NOP
  _;

AJMP_imm i32
  *32* %pc := i32;

LJMP_addr16 i32
  *32* %pc := i32;

RR_A
  *1* bt := %a@[7:7]
  *7* %a@[1:7] := %a@[0:6]
  *1* %a@[0:0] := bt;

INC_dir r32
  *8* m[r32] := m[r32]{8} + 1;

INC_A
  *8* %a := %a + 1;

INC_R0
  *8* %r0 := %r0 + 1;

INC_R1
  *8* %r1 := %r1 + 1;

INC_R2
  *8* %r2 := %r2 + 1;

INC_R3
  *8* %r3 := %r3 + 1;

INC_R4
  *8* %r4 := %r4 + 1;

INC_R5
  *8* %r5 := %r5 + 1;

INC_R6
  *8* %r6 := %r6 + 1;

INC_R7
  *8* %r7 := %r7 + 1;

INC_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* tmpb := tmpb - 1
  *8* m[tmp1] := tmpb;

INC_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* tmpb := tmpb - 1
  *8* m[tmp1] := tmpb;

# 0x10

JBC_dir_imm r32, i32
  *32* %pc := %pc + 3
  *8* tmpb := m[r32]{8}
  add_signed_pc(i32)
  *8* m[r32] := 0
  *32* %pc := [tmpb = 1 ? %pc : tmp5];

# ACALL
ACALL_imm i32
  *32* %pc := %pc + 2
  *32* %sp := %pc
  *32* %pc := i32;

# LCALL
LCALL_addr16 i32
  *32* %pc := %pc + 2
  *32* %sp := %sp + 1
  *32* m[%sp] := %pc
  *32* %pc := i32;

RRC_A
  *1* bt := %CF
  *1* %CF := %a@[7:7]
  *7* %a@[1:7] := %a@[0:6]
  *1* %a@[0:0] := bt;


DEC_dir r32
  *8* m[r32] := m[r32]{8} - 1;

DEC_A
  *8* %a := %a - 1;

DEC_R0
  *8* %r0 := %r0 - 1;

DEC_R1
  *8* %r1 := %r1 - 1;

DEC_R2
  *8* %r2 := %r2 - 1;

DEC_R3
  *8* %r3 := %r3 - 1;

DEC_R4
  *8* %r4 := %r4 - 1;

DEC_R5
  *8* %r5 := %r5 - 1;

DEC_R6
  *8* %r6 := %r6 - 1;

DEC_R7
  *8* %r7 := %r7 - 1;

DEC_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* tmpb := tmpb - 1
  *8* m[tmp1] := tmpb;

DEC_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* tmpb := tmpb - 1
  *8* m[tmp1] := tmpb;

# 0x20

JB_dir_imm r32, i32
  *32* %pc := %pc +3
  add_signed_pc(i32)
  *32* %pc := [m[r32]{8}=1? tmp5 : %pc];

AJMP_imm i32
  *32* %pc := i32;

RET
  *32* retaddr := %sp
  *32* %pc := retaddr;

RL_A
  *1* bt := %a@[0:0]
  *7* %a@[0:6] := %a@[1:7]
  *1* %a@[7:7] := bt;


ADD_A_IMM i32
  *8* %a := %a + i32@[0:7];

ADD_A_dir r32
  *8* %a := %a + m[r32]{8};

ADD_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a + tmpb;

ADD_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a + tmpb;

ADD_A_R0
  *8* %a := %a + %r0;

ADD_A_R1
  *8* %a := %a + %r1;

ADD_A_R2
  *8* %a := %a + %r2;

ADD_A_R3
  *8* %a := %a + %r3;

ADD_A_R4
  *8* %a := %a + %r4;

ADD_A_R5
  *8* %a := %a + %r5;

ADD_A_R6
  *8* %a := %a + %r6;

ADD_A_R7
  *8* %a := %a + %r7;

# 0x30

JNB_dir_imm r32, i32
  *32* %pc := %pc +3
  add_signed_pc(i32)
  *32* %pc := [m[r32]=0? tmp5 : %pc];
# ACALL

RETI
  *32* retaddr := m[%sp]{32}
  *32* %pc := retaddr;

RLC_A
  *1* bt := %CF
  *1* %CF := %a@[0:0]
  *7* %a@[0:6] := %a@[1:7]
  *1* %a@[7:7] := bt;

ADDC_A_IMM i32
  *8* %a := %a + i32@[0:7];

ADDC_A_DIR r32
  *8* %a := %a + m[r32]{8};

ADDC_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a + tmpb;

ADDC_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a + tmpb;

ADDC_A_R0
  *8* %a := %a + %r0;

ADDC_A_R1
  *8* %a := %a + %r1;

ADDC_A_R2
  *8* %a := %a + %r2;

ADDC_A_R3
  *8* %a := %a + %r3;

ADDC_A_R4
  *8* %a := %a + %r4;

ADDC_A_R5
  *8* %a := %a + %r5;

ADDC_A_R6
  *8* %a := %a + %r6;

ADDC_A_R7
  *8* %a := %a + %r7;

# 0x40

JC_imm i32
  *32* %pc := %pc + 2
  add_signed_pc(i32)
  *32* %pc := [%CF = 1 ? tmp5: %pc];

AJMP_imm i32
  *32* %pc := i32;

ORL_dir_A r32
  *8* m[r32] := %a | m[r32]{8};

ORL_dir_imm r32, i32
  *8* m[r32] := m[r32]{8} | i32@[0:7];

ORL_A_IMM i32
  *8* %a := %a | i32@[0:7];

ORL_A_dir r32
  *8* %a := %a | m[r32]{8};

ORL_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a | tmpb;

ORL_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a | tmpb;

ORL_A_R0
  *8* %a := %a | %r0;

ORL_A_R1
  *8* %a := %a | %r1;

ORL_A_R2
  *8* %a := %a | %r2;

ORL_A_R3
  *8* %a := %a | %r3;

ORL_A_R4
  *8* %a := %a | %r4;

ORL_A_R5
  *8* %a := %a | %r5;

ORL_A_R6
  *8* %a := %a | %r6;

ORL_A_R7
  *8* %a := %a | %r7;

# 0x50

JNC_imm i32
  *32* %pc := %pc + 2
  add_signed_pc(i32)
  *32* %pc := [%CF = 0 ? tmp5 : %pc];
# ACALL

ANL_dir_A r32
  *8* m[r32] := %a & m[r32]{8};

ANL_dir_imm r32, i32
  *8* m[r32] := m[r32]{8} & i32@[0:7];

ANL_A_IMM i32
  *8* %a := %a & i32@[0:7];

ANL_A_dir r32
  *8* %a := %a & m[r32]{8};

ANL_A_R0
  *8* %a := %a & %r0;

ANL_A_R1
  *8* %a := %a & %r1;

ANL_A_R2
  *8* %a := %a & %r2;

ANL_A_R3
  *8* %a := %a & %r3;

ANL_A_R4
  *8* %a := %a & %r4;

ANL_A_R5
  *8* %a := %a & %r5;

ANL_A_R6
  *8* %a := %a & %r6;

ANL_A_R7
  *8* %a := %a & %r7;

ANL_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a & tmpb;

ANL_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a & tmpb;

# 0x60

JZ_imm i32
  *32* %pc := %pc + 2
  add_signed_pc(i32)
  *32* %pc := [(%a = 0) ? tmp5 : %pc];
AJMP_imm i32
  *32* %pc := i32;

XRL_dir_A r32
  *8* %a := %a ^ m[r32]{8};

XRL_dir_imm r32, i32
  *8* m[r32] := m[r32]{8} ^ i32@[0:7];

XRL_A_IMM i32
  *8* %a := %a ^ i32@[0:7];

XRL_A_dir r32
  *8* %a := %a ^ m[r32]{8};

XRL_A_R0
  *8* %a := %a ^ %r0;

XRL_A_R1
  *8* %a := %a ^ %r1;

XRL_A_R2
  *8* %a := %a ^ %r2;

XRL_A_R3
  *8* %a := %a ^ %r3;

XRL_A_R4
  *8* %a := %a ^ %r4;

XRL_A_R5
  *8* %a := %a ^ %r5;

XRL_A_R6
  *8* %a := %a ^ %r6;

XRL_A_R7
  *8* %a := %a ^ %r7;

XRL_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a ^ tmpb;

XRL_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a ^ tmpb;


# 0x70

JNZ_imm i32
  *32* %pc := %pc + 2
  add_signed_pc(i32)
  *32* %pc := [(%a ~= 0) ? tmp5 : %pc];

# ACALL
ORL_C_dir i32
  *1* %CF := m[i32]{1};

JMP_AaddDPTR
  *32* tmp1 := zfill(16, 31, %dptr)
  *32* tmp2 := zfill(8, 31, %a)
  *32* %pc := tmp1 + tmp2;

MOV_DIR_IMM r32, i32
  *8* m[r32] := i32@[0:7];

MOV_A_IMM i32
  *8* %a := i32@[0:7];

MOV_R0_IMM i32
  *8* %r0 := i32@[0:7];

MOV_R1_IMM i32
  *8* %r1 := i32@[0:7];

MOV_R2_IMM i32
  *8* %r2 := i32@[0:7];

MOV_R3_IMM i32
  *8* %r3 := i32@[0:7];

MOV_R4_IMM i32
  *8* %r4 := i32@[0:7];

MOV_R5_IMM i32
  *8* %r5 := i32@[0:7];

MOV_R6_IMM i32
  *8* %r6 := i32@[0:7];

MOV_R7_IMM i32
  *8* %r7 := i32@[0:7];

MOV_Ri0_IMM i32
  *32* tmp1 := zfill(8, 31, %r0)
  *8* m[tmp1] := i32@[0:7];

MOV_Ri1_IMM i32
  *32* tmp1 := zfill(8, 31, %r1)
  *8* m[tmp1] := i32@[0:7];


# 0x80

SJMP_imm i32
  *32* %pc := %pc + 2
  add_signed_pc(i32)
  *32* %pc := tmp5;

AJMP_imm i32
  *32* %pc := i32;

ANL_C_dir r32
  *1* %CF := m[r32]{1};

MOVC_A_AaddPC
  *32* tmp1 := zfill(16, 31, %pc)
  *32* tmp2 := zfill(8, 31, %a)
  *32* tmp1 := tmp1 + tmp2
  *8* %a := m[tmp1]{8};

DIV_AB
  *8* tmpb := %a
  *8* %a := %a / %b
  *8* %b := %a % %b;

MOV_dir_dir r32, rx32
  *8* m[r32] := m[rx32]{8};

MOV_dir_Ri0 r32
  *32* tmp1 := zfill(8, 31, %r0)
  *8* m[tmp1] := m[r32]{8};

MOV_dir_Ri1 r32
  *32* tmp1 := zfill(8, 31, %r1)
  *8* m[tmp1] := m[r32]{8};

MOV_dir_Ri1 r32
  *8* m[r32] := %r1;

MOV_dir_R0 r32
  *8* m[r32] := %r0;

MOV_dir_A r32
  *8* m[r32] := %a;

MOV_dir_R1 r32
  *8* m[r32] := %r1;

MOV_dir_R2 r32
  *8* m[r32] := %r2;

MOV_dir_R3 r32
  *8* m[r32] := %r3;

MOV_dir_R4 r32
  *8* m[r32] := %r4;

MOV_dir_R5 r32
  *8* m[r32] := %r5;

MOV_dir_R6 r32
  *8* m[r32] := %r6;

MOV_dir_R7 r32
  *8* m[r32] := %r7;

# 0x90
MOV_dptr_addr16 i32
  *16* %dptr := i32@[0:15];

# ACALL

MOV_dir_C r32
  *1* m[r32] := %CF;

MOVC_A_AaddDPTR
  *32* tmp1 := zfill(16, 31, %dptr)
  *32* tmp2 := zfill(8, 31, %a)
  *32* tmp1 := tmp1 + tmp2
  *8* %a := m[tmp1]{8};

SUBB_A_IMM i32
  *8* %a := %a - i32@[0:7];

SUBB_A_dir r32
  *8* %a := %a - m[r32]{8};

SUBB_A_R0
  *8* %a := %a - %r0;

SUBB_A_R1
  *8* %a := %a - %r1;

SUBB_A_R2
  *8* %a := %a - %r2;

SUBB_A_R3
  *8* %a := %a - %r3;

SUBB_A_R4
  *8* %a := %a - %r4;

SUBB_A_R5
  *8* %a := %a - %r5;

SUBB_A_R6
  *8* %a := %a - %r6;

SUBB_A_R7
  *8* %a := %a - %r7;

SUBB_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a - tmpb;

SUBB_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *8* %a := %a - tmpb;

# 0xA0

ORL_C_cdir r32
  *1* %CF :=  1 - m[r32]{1};

AJMP_imm i32
  *32* %pc := i32;

MOV_C_dir r32
  *1* %CF := m[r32]{1};

INC_DPTR
  *16* %dptr := %dptr + 1;

MUL_AB
  *16* tmpw := %a * %b
  *8* %a := tmpw@[0:7]
  *8* %b := tmpw@[8:15];

MOV_Ri0_dir r32
  *32* tmp1 := zfill(8, 31, %r0)
  *8* m[r32] := m[tmp1];

MOV_Ri1_dir r32
  *32* tmp1 := zfill(8, 31, %r1)
  *8* m[r32] := m[tmp1];

MOV_R0_dir r32
  *8* %r0 := m[r32]{8};

MOV_R1_dir r32
  *8* %r1 := m[r32]{8};

MOV_R2_dir r32
  *8* %r2 := m[r32]{8};

MOV_R3_dir r32
  *8* %r3 := m[r32]{8};

MOV_R4_dir r32
  *8* %r4 := m[r32]{8};

MOV_R5_dir r32
  *8* %r5 := m[r32]{8};

MOV_R6_dir r32
  *8* %r6 := m[r32]{8};

MOV_R7_dir r32
  *8* %r7 := m[r32]{8};


# 0xB0

ANL_C_cdir r32
  *1* %CF := 1 - m[r32]{1};

# ACALL

CPL_dir r32
  *1* m[r32] := 1 - m[r32]{1};

CPL_C
  *1* %CF := 1 - %CF;

CJNE_A_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%a = tmpb) ? %pc : tmp5]
  *1* %CF := [(%a < tmpb) ? 1 : 0];

CJNE_A_dir_imm r32, i32
  *8* tmpb := m[r32]{8}
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%a = tmpb) ? %pc : tmp5]
  *1* %CF := [(%a < tmpb) ? 1 : 0];

CJNE_Ri0_imm_imm i32, ix32
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := m[tmp1]{8}
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(i32@[0:7] = tmpb) ? %pc : tmp5]
  *1* %CF := [(%a < tmpb) ? 1 : 0];

CJNE_Ri1_imm_imm i32, ix32
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := m[tmp1]{8}
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(i32@[0:7] = tmpb) ? %pc : tmp5]
  *1* %CF := [(%a < tmpb) ? 1 : 0];

CJNE_R0_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r0 = tmpb) ? %pc : tmp5]
  *1* %CF := [(%a < tmpb) ? 1 : 0];

CJNE_R1_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r1 = tmpb) ? %pc : tmp5]
  *1* %CF := [(%a < tmpb) ? 1 : 0];

CJNE_R2_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r2 = tmpb) ? %pc : tmp5]
  *1* %CF := [(%a < tmpb) ? 1 : 0];

CJNE_R3_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r3 = tmpb) ? %pc : tmp5]
  *1* CF := [(%a < tmpb) ? 1 : 0];

CJNE_R4_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r4 = tmpb) ? %pc : tmp5]
  *1* CF := [(%a < tmpb) ? 1 : 0];

CJNE_R5_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r5 = tmpb) ? %pc : tmp5]
  *1* CF := [(%a < tmpb) ? 1 : 0];

CJNE_R6_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r6 = tmpb) ? %pc : tmp5]
  *1* CF := [(%a < tmpb) ? 1 : 0];

CJNE_R7_imm_imm i32, ix32
  *8* tmpb := i32@[0:7]
  *32* %pc := %pc + 3
  add_signed_pc(ix32)
  *32* %pc := [(%r7 = tmpb) ? %pc : tmp5]
  *1* CF := [(%a < tmpb) ? 1 : 0];


# 0xC0

PUSH_dir r32
*32* %sp := %sp + 1
*32* m[%sp] := m[r32];

AJMP_imm i32
  *32* %pc := i32;

CLR_dir r32
  *8* m[r32]{8} := 0;

CLR_C
  *1* %CF := 0;


SWAP_A
  *4* bt4 := %a@[0:3]
  *4* %a@[0:3] := %a@[4:7]
  *4* %a@[4:7] := bt4;

XCH_A_dir r32
  *8* tmpb := %a
  *8* %a := m[r32]{8}
  *8* m[r32] := tmpb;

XCH_A_R0
  *8* tmpb := %a
  *8* %a := %r0
  *8* %r0 := tmpb;

XCH_A_R1
  *8* tmpb := %a
  *8* %a := %r1
  *8* %r1 := tmpb;

XCH_A_R2
  *8* tmpb := %a
  *8* %a := %r2
  *8* %r2 := tmpb;

XCH_A_R3
  *8* tmpb := %a
  *8* %a := %r3
  *8* %r3 := tmpb;

XCH_A_R4
  *8* tmpb := %a
  *8* %a := %r4
  *8* %r4 := tmpb;

XCH_A_R5
  *8* tmpb := %a
  *8* %a := %r5
  *8* %r5 := tmpb;

XCH_A_R6
  *8* tmpb := %a
  *8* %a := %r6
  *8* %r6 := tmpb;

XCH_A_R7
  *8* tmpb := %a
  *8* %a := %r7
  *8* %r7 := tmpb;

XCH_A_Ri0
  *32* tmp1 := zfill(8, 31, %a)
  *8* %r0 := m[tmp1]{8};

XCH_A_Ri1
  *32* tmp1 := zfill(8, 31, %a)
  *8* %r1 := m[tmp1]{8};

# 0xD0

POP_dir r32
*32* m[r32] := m[%sp]
*32* %sp := %sp - 1;

# ACALL_addr11

SETB_dir r32
  *8* m[r32] := 1;

SETB_C
  *1* %CF := 1;

DA_A
  *4* %a@[0:3] := [((%a@[0:3] > 9) | (%AC = 1)) ? %a@[0:3] + 6 : %a@[0:3]]
  *4* %a@[4:7] := [((%a@[4:7] > 9) | (%CF = 1)) ? %a@[4:7] + 6 : %a@[4:7]];

DJNZ_dir_imm r32, i32
  *32* %pc := %pc + 3
  *8* m[r32] := m[r32]{8} - 1
  add_signed_pc(i32)
  *32* %pc := [(m[r32]{8} = 0) ? %pc : tmp5];

XCHD_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* tmpb := %a
  *8* %a := m[tmp1]{8}
  *8* m[tmp1] := tmpb;

XCHD_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* tmpb := %a
  *8* %a := m[tmp1]{8}
  *8* m[tmp1] := tmpb;

DJNZ_R0_imm i32
  *32* %pc := %pc + 2
  *8* %r0 := %r0 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r0 = 0) ? %pc : tmp5];

DJNZ_R1_imm i32
  *32* %pc := %pc + 2
  *8* %r1 := %r1 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r1 = 0) ? %pc : tmp5];

DJNZ_R2_imm i32
  *32* %pc := %pc + 2
  *8* %r2 := %r2 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r2 = 0) ? %pc : tmp5];

DJNZ_R3_imm i32
  *32* %pc := %pc + 2
  *8* %r3 := %r3 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r3 = 0) ? %pc : tmp5];

DJNZ_R4_imm i32
  *32* %pc := %pc + 2
  *8* %r4 := %r4 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r4 = 0) ? %pc : tmp5];

DJNZ_R5_imm i32
  *32* %pc := %pc + 2
  *8* %r5 := %r5 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r5 = 0) ? %pc : tmp5];

DJNZ_R6_imm i32
  *32* %pc := %pc + 2
  *8* %r6 := %r6 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r6 = 0) ? %pc : tmp5];

DJNZ_R7_imm i32
  *32* %pc := %pc + 2
  *8* %r7 := %r7 - 1
  add_signed_pc(i32)
  *32* %pc := [(%r7 = 0) ? %pc : tmp5];

# 0xE0

MOVX_A_DPTRA
  *32* tmp1 := zfill(16, 31, %dptr)
  *8* %a := m[tmp1]{8};

MOVX_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* %a := m[tmp1]{8};

MOVX_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* %a := m[tmp1]{8};

CLR_A
  *8* %a := 0;

MOV_A_dir r32
  *8* %a := m[r32]{8};

MOV_A_R0
  *8* %a := %r0;

MOV_A_R1
  *8* %a := %r1;

MOV_A_R2
  *8* %a := %r2;

MOV_A_R3
  *8* %a := %r3;

MOV_A_R4
  *8* %a := %r4;

MOV_A_R5
  *8* %a := %r5;

MOV_A_R6
  *8* %a := %r6;

MOV_A_R7
  *8* %a := %r7;

MOV_A_Ri0
  *32* tmp1 := zfill(8, 31, %r0)
  *8* %a := m[tmp1]{8};

MOV_A_Ri1
  *32* tmp1 := zfill(8, 31, %r1)
  *8* %a := m[tmp1]{8};


# 0xF0

MOVX_DPTRA_A
  *32* tmp1 := zfill(16, 31, %dptr)
  *8* m[tmp1] := %a;

# ACALL

MOVX_Ri0_A
  *32* tmp1 := zfill(8, 31, %r0)
  *8* m[tmp1] := %a;

MOVX_Ri1_A
  *32* tmp1 := zfill(8, 31, %r1)
  *8* m[tmp1] := %a;

CPL_A
  *8* %a := 0 - %a;

MOV_Ri0_A
  *32* tmp1 := zfill(8, 31, %r0)
  *8* m[tmp1] := %a;

MOV_Ri1_A
  *32* tmp1 := zfill(8, 31, %r1)
  *8* m[tmp1] := %a;

MOV_R0_A
  *8* %r0 := %a;

MOV_R1_A
  *8* %r1 := %a;

MOV_R2_A
  *8* %r2 := %a;

MOV_R3_A
  *8* %r3 := %a;

MOV_R4_A
  *8* %r4 := %a;

MOV_R5_A
  *8* %r5 := %a;

MOV_R6_A
  *8* %r6 := %a;

MOV_R7_A
  *8* %r7 := %a;

ADDFLAG(op1, op2, result) {
  *1* %CF := 1
  *1* %AC := 1
  *1* %OV := 1
};

SUBFLAG(op1, op2, result) {
  *1* %CF := 1
  *1* %AC := 1
  *1* %OV := 1  
};